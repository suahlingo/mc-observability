commit d2900899198ff6c31d7e9a3f75e58e2c870bee03
Author: ish <ish@innogrid.com>
Date:   Fri Sep 13 10:51:37 2024 +0900

    Azure: Initialize work of getting cluster node monitoring metrics

diff --git a/api-runtime/common-runtime/MonitoringManager.go b/api-runtime/common-runtime/MonitoringManager.go
index 032bdee1..51ca7aaf 100644
--- a/api-runtime/common-runtime/MonitoringManager.go
+++ b/api-runtime/common-runtime/MonitoringManager.go
@@ -9,15 +9,17 @@
 package commonruntime
 
 import (
+	"fmt"
 	ccm "github.com/cloud-barista/cb-spider/cloud-control-manager"
 	cres "github.com/cloud-barista/cb-spider/cloud-control-manager/cloud-driver/interfaces/resources"
 	infostore "github.com/cloud-barista/cb-spider/info-store"
+	"strconv"
 )
 
 //================ Monitoring Handler
 
 func GetVMMetricData(connectionName string, nameID string, metricType cres.MetricType, periodMinute string, timeBeforeHour string) (*cres.MetricData, error) {
-	cblog.Info("call GetMetricData()")
+	cblog.Info("call GetVMMetricData()")
 
 	// check empty and trim user inputs
 	connectionName, err := EmptyCheckAndTrim("connectionName", connectionName)
@@ -62,16 +64,113 @@ func GetVMMetricData(connectionName string, nameID string, metricType cres.Metri
 		return nil, err
 	}
 
-	// (3) set ResourceInfo(IID.NameId)
-	// set ResourceInfo
-	vm.IId = getUserIID(cres.IID{NameId: iidInfo.NameId, SystemId: iidInfo.SystemId})
+	monitoringHandler, err := cldConn.CreateMonitoringHandler()
+	if err != nil {
+		cblog.Error(err)
+		return nil, err
+	}
 
-	err = getSetNameId(connectionName, &vm)
+	// (4) get monitoring info
+	info, err := monitoringHandler.GetVMMetricData(cres.VMMonitoringReqInfo{
+		VMIID:          vm.IId,
+		MetricType:     metricType,
+		IntervalMinute: periodMinute,
+		TimeBeforeHour: timeBeforeHour,
+	})
 	if err != nil {
 		cblog.Error(err)
 		return nil, err
 	}
 
+	return &info, nil
+}
+
+func GetClusterNodeMetricData(connectionName string, clusterNameID string, nodeGroupNameID string, nodeNumber string, metricType cres.MetricType, periodMinute string, timeBeforeHour string) (*cres.MetricData, error) {
+	cblog.Info("call GetClusterNodeMetricData()")
+
+	// check empty and trim user inputs
+	connectionName, err := EmptyCheckAndTrim("connectionName", connectionName)
+	if err != nil {
+		cblog.Error(err)
+		return nil, err
+	}
+
+	clusterNameID, err = EmptyCheckAndTrim("clusterNameID", clusterNameID)
+	if err != nil {
+		cblog.Error(err)
+		return nil, err
+	}
+
+	nodeGroupNameID, err = EmptyCheckAndTrim("nodeGroupNameID", nodeGroupNameID)
+	if err != nil {
+		cblog.Error(err)
+		return nil, err
+	}
+
+	nodeNumber, err = EmptyCheckAndTrim("nodeNumber", nodeNumber)
+	if err != nil {
+		cblog.Error(err)
+		return nil, err
+	}
+
+	nodeNumberInt, err := strconv.Atoi(nodeNumber)
+	if err != nil || nodeNumberInt <= 0 {
+		errMsg := "Invalid node number " + nodeNumber
+		cblog.Error(errMsg)
+		return nil, fmt.Errorf(errMsg)
+	}
+
+	cldConn, err := ccm.GetCloudConnection(connectionName)
+	if err != nil {
+		cblog.Error(err)
+		return nil, err
+	}
+
+	clusterSPLock.RLock(connectionName, clusterNameID)
+	defer clusterSPLock.RUnlock(connectionName, clusterNameID)
+
+	cluserDriverIID, nodeGroupDriverIID, err := getClusterDriverIIDNodeGroupDriverIID(connectionName, clusterNameID, nodeGroupNameID)
+	if err != nil {
+		cblog.Error(err)
+		return nil, err
+	}
+
+	clusterHandler, err := cldConn.CreateClusterHandler()
+	if err != nil {
+		cblog.Error(err)
+		return nil, err
+	}
+
+	clusterInfo, err := clusterHandler.GetCluster(cluserDriverIID)
+	if err != nil {
+		cblog.Error(err)
+		return nil, err
+	}
+
+	var nodeGroupExist bool
+	var nodeNameId string
+
+	for _, nodeGroup := range clusterInfo.NodeGroupList {
+		if nodeGroup.IId.NameId == nodeGroupDriverIID.NameId {
+			if nodeNumberInt > len(nodeGroup.Nodes) {
+				errMsg := fmt.Sprintf("Node number %s is greater than the number of nodes (%d).", nodeNumber, len(nodeGroup.Nodes))
+				cblog.Error(errMsg)
+				return nil, fmt.Errorf(errMsg)
+			}
+
+			nodeNameId = nodeGroup.Nodes[nodeNumberInt-1].NameId
+
+			nodeGroupExist = true
+			break
+		}
+	}
+
+	if !nodeGroupExist {
+		errMsg := fmt.Sprintf("node group %s not exist", nodeGroupDriverIID.NameId)
+		cblog.Error(errMsg)
+		return nil, fmt.Errorf(errMsg)
+	}
+
 	monitoringHandler, err := cldConn.CreateMonitoringHandler()
 	if err != nil {
 		cblog.Error(err)
@@ -79,8 +178,10 @@ func GetVMMetricData(connectionName string, nameID string, metricType cres.Metri
 	}
 
 	// (4) get monitoring info
-	info, err := monitoringHandler.GetVMMetricData(cres.MonitoringReqInfo{
-		VMIID:          vm.IId,
+	info, err := monitoringHandler.GetClusterNodeMetricData(cres.ClusterNodeMonitoringReqInfo{
+		ClusterIID:     cluserDriverIID,
+		NodeGroupID:    nodeGroupDriverIID,
+		NodeIID:        cres.IID{NameId: nodeNameId},
 		MetricType:     metricType,
 		IntervalMinute: periodMinute,
 		TimeBeforeHour: timeBeforeHour,
diff --git a/api-runtime/rest-runtime/CBSpiderRuntime.go b/api-runtime/rest-runtime/CBSpiderRuntime.go
index 3a9f5d86..a9fb3562 100644
--- a/api-runtime/rest-runtime/CBSpiderRuntime.go
+++ b/api-runtime/rest-runtime/CBSpiderRuntime.go
@@ -450,6 +450,7 @@ func RunServer() {
 
 		//----------Monitoring Handler
 		{"GET", "/monitoring/vm/:VMName/:MetricType", GetVMMetricData},
+		{"GET", "/monitoring/clusternode/:ClusterName/:NodeGroupName/:NodeNumber/:MetricType", GetClusterNodeMetricData},
 
 		//----------Destory All Resources in a Connection
 		{"DELETE", "/destroy", Destroy},
diff --git a/api-runtime/rest-runtime/CBSpiderRuntime.go.orig b/api-runtime/rest-runtime/CBSpiderRuntime.go.orig
index d1d1da56..ddc6008b 100644
--- a/api-runtime/rest-runtime/CBSpiderRuntime.go.orig
+++ b/api-runtime/rest-runtime/CBSpiderRuntime.go.orig
@@ -442,6 +442,9 @@ func RunServer() {
 		{"GET", "/tag/:Key", GetTag},
 		{"DELETE", "/tag/:Key", RemoveTag},
 
+		//----------Monitoring Handler
+		{"GET", "/monitoring/vm/:VMName/:MetricType", GetVMMetricData},
+
 		//----------Destory All Resources in a Connection
 		{"DELETE", "/destroy", Destroy},
 
diff --git a/api-runtime/rest-runtime/MonitoringRest.go b/api-runtime/rest-runtime/MonitoringRest.go
index b192c829..e8e8bbcb 100644
--- a/api-runtime/rest-runtime/MonitoringRest.go
+++ b/api-runtime/rest-runtime/MonitoringRest.go
@@ -61,3 +61,45 @@ func GetVMMetricData(c echo.Context) error {
 
 	return c.JSON(http.StatusOK, result)
 }
+
+func GetClusterNodeMetricData(c echo.Context) error {
+	cblog.Info("call GetClusterNodeMetricData()")
+
+	var req struct {
+		ConnectionName string
+		PeriodMinute   string
+		TimeBeforeHour string
+	}
+
+	if err := c.Bind(&req); err != nil {
+		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
+	}
+
+	// To support for Get-Query Param Type API
+	if req.ConnectionName == "" {
+		req.ConnectionName = c.QueryParam("ConnectionName")
+	}
+
+	strMetricType := c.Param("MetricType")
+	metricType := cres.StringMetricType(strMetricType)
+	if metricType == cres.Unknown {
+		return echo.NewHTTPError(http.StatusInternalServerError, "Invalid Metric Type")
+	}
+
+	req.PeriodMinute = c.QueryParam("IntervalMinute")
+	if req.PeriodMinute == "" {
+		req.PeriodMinute = "1"
+	}
+	req.TimeBeforeHour = c.QueryParam("TimeBeforeHour")
+	if req.TimeBeforeHour == "" {
+		req.TimeBeforeHour = "1"
+	}
+
+	// Call common-runtime API
+	result, err := cmrt.GetClusterNodeMetricData(req.ConnectionName, c.Param("ClusterName"), c.Param("NodeGroupName"), c.Param("NodeNumber"), metricType, req.PeriodMinute, req.TimeBeforeHour)
+	if err != nil {
+		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
+	}
+
+	return c.JSON(http.StatusOK, result)
+}
diff --git a/cloud-control-manager/cloud-driver/drivers/azure/connect/Azure_CloudConnection.go b/cloud-control-manager/cloud-driver/drivers/azure/connect/Azure_CloudConnection.go
index 6ec4c9dd..e086aa9a 100644
--- a/cloud-control-manager/cloud-driver/drivers/azure/connect/Azure_CloudConnection.go
+++ b/cloud-control-manager/cloud-driver/drivers/azure/connect/Azure_CloudConnection.go
@@ -248,11 +248,17 @@ func (cloudConn *AzureCloudConnection) CreateTagHandler() (irs.TagHandler, error
 func (cloudConn *AzureCloudConnection) CreateMonitoringHandler() (irs.MonitoringHandler, error) {
 	cblogger.Info("Azure Cloud Driver: called CreateMonitoringHandler()!")
 	monitoringHandler := azrs.AzureMonitoringHandler{
-		CredentialInfo: cloudConn.CredentialInfo,
-		Region:         cloudConn.Region,
-		Ctx:            cloudConn.Ctx,
-		Client:         cloudConn.VMClient,
-		MetricClient:   cloudConn.MetricClient,
+		CredentialInfo:                  cloudConn.CredentialInfo,
+		Region:                          cloudConn.Region,
+		Ctx:                             cloudConn.Ctx,
+		VMClient:                        cloudConn.VMClient,
+		ManagedClustersClient:           cloudConn.ManagedClustersClient,
+		SecurityGroupsClient:            cloudConn.SecurityGroupClient,
+		VirtualNetworksClient:           cloudConn.VNetClient,
+		AgentPoolsClient:                cloudConn.AgentPoolsClient,
+		VirtualMachineScaleSetsClient:   cloudConn.VirtualMachineScaleSetsClient,
+		VirtualMachineScaleSetVMsClient: cloudConn.VirtualMachineScaleSetVMsClient,
+		MetricClient:                    cloudConn.MetricClient,
 	}
 	return &monitoringHandler, nil
 }
diff --git a/cloud-control-manager/cloud-driver/drivers/azure/main/Test_Resources.go b/cloud-control-manager/cloud-driver/drivers/azure/main/Test_Resources.go
index 0ac2e76b..fa53b36e 100644
--- a/cloud-control-manager/cloud-driver/drivers/azure/main/Test_Resources.go
+++ b/cloud-control-manager/cloud-driver/drivers/azure/main/Test_Resources.go
@@ -2123,7 +2123,8 @@ func testMonitoringHandlerListPrint() {
 	cblogger.Info("Test MonitoringHandler")
 	cblogger.Info("0. Print Menu")
 	cblogger.Info("1. GetVMMetricData()")
-	cblogger.Info("2. Exit")
+	cblogger.Info("2. GetClusterNodeMetricData()")
+	cblogger.Info("3. Exit")
 }
 
 func testMonitoringHandlerMetricTypeListPrint() {
@@ -2217,7 +2218,7 @@ Loop:
 				timeBeforeHour = strings.TrimSpace(timeBeforeHour)
 
 				if getVMMetricData, err := monitoringHandler.GetVMMetricData(
-					irs.MonitoringReqInfo{
+					irs.VMMonitoringReqInfo{
 						VMIID: irs.IID{
 							NameId: vmName,
 						},
@@ -2231,6 +2232,99 @@ Loop:
 				}
 				cblogger.Info("Finish GetVMMetricData()")
 			case 2:
+				cblogger.Info("Start GetClusterNodeMetricData() ...")
+
+				fmt.Println("=== Enter Cluster's name ===")
+				in := bufio.NewReader(os.Stdin)
+				clusterName, err := in.ReadString('\n')
+				if err != nil {
+					cblogger.Error(err)
+				}
+				clusterName = strings.TrimSpace(clusterName)
+
+				fmt.Println("=== Enter NodeGroup's name ===")
+				in = bufio.NewReader(os.Stdin)
+				nodeGroupName, err := in.ReadString('\n')
+				if err != nil {
+					cblogger.Error(err)
+				}
+				nodeGroupName = strings.TrimSpace(nodeGroupName)
+
+				fmt.Println("=== Enter VM's name ===")
+				in = bufio.NewReader(os.Stdin)
+				vmName, err := in.ReadString('\n')
+				if err != nil {
+					cblogger.Error(err)
+				}
+				vmName = strings.TrimSpace(vmName)
+
+				fmt.Println("=== Enter metric type (Default: cpu_usage) ===")
+				testMonitoringHandlerMetricTypeListPrint()
+				inputCnt, err := fmt.Scan(&commandNum)
+				if err != nil {
+					cblogger.Error(err)
+				}
+				var metricType irs.MetricType
+				if inputCnt == 1 {
+					switch commandNum {
+					case 1:
+						metricType = irs.CPUUsage
+					case 2:
+						metricType = irs.MemoryUsage
+					case 3:
+						metricType = irs.DiskRead
+					case 4:
+						metricType = irs.DiskWrite
+					case 5:
+						metricType = irs.DiskReadOps
+					case 6:
+						metricType = irs.DiskWriteOps
+					case 7:
+						metricType = irs.NetworkIn
+					case 8:
+						metricType = irs.NetworkOut
+					default:
+						cblogger.Error("Invalid input")
+					}
+				}
+
+				fmt.Println("=== Enter period (minute) (Default: 1m) ===")
+				in = bufio.NewReader(os.Stdin)
+				periodMinute, err := in.ReadString('\n')
+				if err != nil {
+					cblogger.Error(err)
+				}
+				periodMinute = strings.TrimSpace(periodMinute)
+
+				fmt.Println("=== Enter time before (hour) (Default: 1h) ===")
+				in = bufio.NewReader(os.Stdin)
+				timeBeforeHour, err := in.ReadString('\n')
+				if err != nil {
+					cblogger.Error(err)
+				}
+				timeBeforeHour = strings.TrimSpace(timeBeforeHour)
+
+				if getVMMetricData, err := monitoringHandler.GetClusterNodeMetricData(
+					irs.ClusterNodeMonitoringReqInfo{
+						ClusterIID: irs.IID{
+							NameId: clusterName,
+						},
+						NodeGroupID: irs.IID{
+							NameId: nodeGroupName,
+						},
+						NodeIID: irs.IID{
+							NameId: vmName,
+						},
+						MetricType:     metricType,
+						IntervalMinute: periodMinute,
+						TimeBeforeHour: timeBeforeHour,
+					}); err != nil {
+					cblogger.Error(err)
+				} else {
+					spew.Dump(getVMMetricData)
+				}
+				cblogger.Info("Finish GetVMMetricData()")
+			case 3:
 				cblogger.Info("Exit")
 				break Loop
 			}
diff --git a/cloud-control-manager/cloud-driver/drivers/azure/resources/MonitoringHandler.go b/cloud-control-manager/cloud-driver/drivers/azure/resources/MonitoringHandler.go
index b93d7dee..3467c43e 100644
--- a/cloud-control-manager/cloud-driver/drivers/azure/resources/MonitoringHandler.go
+++ b/cloud-control-manager/cloud-driver/drivers/azure/resources/MonitoringHandler.go
@@ -16,6 +16,8 @@ import (
 	"fmt"
 	"github.com/Azure/azure-sdk-for-go/sdk/monitor/azquery"
 	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v6"
+	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice/v6"
+	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v6"
 	"strconv"
 	"strings"
 	"time"
@@ -27,11 +29,17 @@ import (
 )
 
 type AzureMonitoringHandler struct {
-	CredentialInfo idrv.CredentialInfo
-	Region         idrv.RegionInfo
-	Ctx            context.Context
-	Client         *armcompute.VirtualMachinesClient
-	MetricClient   *azquery.MetricsClient
+	CredentialInfo                  idrv.CredentialInfo
+	Region                          idrv.RegionInfo
+	Ctx                             context.Context
+	VMClient                        *armcompute.VirtualMachinesClient
+	ManagedClustersClient           *armcontainerservice.ManagedClustersClient
+	SecurityGroupsClient            *armnetwork.SecurityGroupsClient
+	VirtualNetworksClient           *armnetwork.VirtualNetworksClient
+	AgentPoolsClient                *armcontainerservice.AgentPoolsClient
+	VirtualMachineScaleSetsClient   *armcompute.VirtualMachineScaleSetsClient
+	VirtualMachineScaleSetVMsClient *armcompute.VirtualMachineScaleSetVMsClient
+	MetricClient                    *azquery.MetricsClient
 }
 
 var availableIntervalMinutes = []string{
@@ -69,59 +77,7 @@ func toAzureIntervalMinute(intervalMinute string) (string, error) {
 	}
 }
 
-func (monitoringHandler *AzureMonitoringHandler) GetVMMetricData(monitoringReqInfo irs.MonitoringReqInfo) (irs.MetricData, error) {
-	intervalMinute, err := strconv.Atoi(monitoringReqInfo.IntervalMinute)
-	if err != nil {
-		if monitoringReqInfo.IntervalMinute == "" {
-			monitoringReqInfo.IntervalMinute = "1"
-			intervalMinute = 1
-		} else {
-			return irs.MetricData{}, errors.New("invalid value of IntervalMinute")
-		}
-	}
-
-	interval, err := toAzureIntervalMinute(monitoringReqInfo.IntervalMinute)
-	if err != nil {
-		return irs.MetricData{}, err
-	}
-
-	timeBeforeHour, err := strconv.Atoi(monitoringReqInfo.TimeBeforeHour)
-	if err != nil {
-		if monitoringReqInfo.TimeBeforeHour == "" {
-			monitoringReqInfo.TimeBeforeHour = "1"
-			timeBeforeHour = 1
-		} else {
-			return irs.MetricData{}, errors.New("invalid value of TimeBeforeHour")
-		}
-	}
-	if timeBeforeHour < 0 {
-		return irs.MetricData{}, errors.New("invalid value of TimeBeforeHour")
-	}
-
-	if timeBeforeHour*60 < intervalMinute {
-		return irs.MetricData{}, errors.New("IntervalMinute is too far in the past")
-	}
-
-	// log HisCall
-	hiscallInfo := GetCallLogScheme(monitoringHandler.Region, call.MONITORING, monitoringReqInfo.VMIID.NameId, "GetVMMonitoring()")
-	start := call.Start()
-
-	convertedIID, err := ConvertVMIID(monitoringReqInfo.VMIID, monitoringHandler.CredentialInfo, monitoringHandler.Region)
-	if err != nil {
-		getErr := errors.New(fmt.Sprintf("Failed to get metric data. err = %s", err))
-		cblogger.Error(getErr.Error())
-		LoggingError(hiscallInfo, getErr)
-		return irs.MetricData{}, getErr
-	}
-
-	vm, err := GetRawVM(convertedIID, monitoringHandler.Region.Region, monitoringHandler.Client, monitoringHandler.Ctx)
-	if err != nil {
-		getErr := errors.New(fmt.Sprintf("Failed to get metric data. err = %s", err))
-		cblogger.Error(getErr.Error())
-		LoggingError(hiscallInfo, getErr)
-		return irs.MetricData{}, getErr
-	}
-
+func (monitoringHandler *AzureMonitoringHandler) getMetricData(metricType irs.MetricType, interval string, timeBeforeHour int, resourceID string) (irs.MetricData, error) {
 	endTime := time.Now().UTC()
 	startTime := endTime.Add(time.Duration(-timeBeforeHour) * time.Hour)
 	timespan := azquery.TimeInterval(fmt.Sprintf("%s/%s", startTime.Format(time.RFC3339), endTime.Format(time.RFC3339)))
@@ -129,7 +85,7 @@ func (monitoringHandler *AzureMonitoringHandler) GetVMMetricData(monitoringReqIn
 	var metricName = "Percentage CPU" // irs.CPUUsage
 	var aggregation = azquery.AggregationTypeAverage
 
-	switch monitoringReqInfo.MetricType {
+	switch metricType {
 	case irs.MemoryUsage:
 		metricName = "Available Memory Bytes"
 	case irs.DiskRead:
@@ -155,7 +111,7 @@ func (monitoringHandler *AzureMonitoringHandler) GetVMMetricData(monitoringReqIn
 	metricNames := strings.Join(metrics, ",")
 	resultType := azquery.ResultTypeData
 
-	resp, err := monitoringHandler.MetricClient.QueryResource(context.Background(), *vm.ID, &azquery.MetricsClientQueryResourceOptions{
+	resp, err := monitoringHandler.MetricClient.QueryResource(context.Background(), resourceID, &azquery.MetricsClientQueryResourceOptions{
 		Aggregation:     []*azquery.AggregationType{&aggregation},
 		Filter:          nil,
 		Interval:        toStrPtr(interval),
@@ -169,12 +125,9 @@ func (monitoringHandler *AzureMonitoringHandler) GetVMMetricData(monitoringReqIn
 	if err != nil {
 		getErr := errors.New(fmt.Sprintf("Failed to get metric data. err = %s", err))
 		cblogger.Error(getErr.Error())
-		LoggingError(hiscallInfo, getErr)
 		return irs.MetricData{}, getErr
 	}
 
-	LoggingInfo(hiscallInfo, start)
-
 	var vmMonitoringInfo irs.MetricData
 	var timestampValues []irs.TimestampValue
 
@@ -223,3 +176,163 @@ func (monitoringHandler *AzureMonitoringHandler) GetVMMetricData(monitoringReqIn
 
 	return vmMonitoringInfo, nil
 }
+
+func (monitoringHandler *AzureMonitoringHandler) GetVMMetricData(vmMonitoringReqInfo irs.VMMonitoringReqInfo) (irs.MetricData, error) {
+	intervalMinute, err := strconv.Atoi(vmMonitoringReqInfo.IntervalMinute)
+	if err != nil {
+		if vmMonitoringReqInfo.IntervalMinute == "" {
+			vmMonitoringReqInfo.IntervalMinute = "1"
+			intervalMinute = 1
+		} else {
+			return irs.MetricData{}, errors.New("invalid value of IntervalMinute")
+		}
+	}
+
+	interval, err := toAzureIntervalMinute(vmMonitoringReqInfo.IntervalMinute)
+	if err != nil {
+		return irs.MetricData{}, err
+	}
+
+	timeBeforeHour, err := strconv.Atoi(vmMonitoringReqInfo.TimeBeforeHour)
+	if err != nil {
+		if vmMonitoringReqInfo.TimeBeforeHour == "" {
+			vmMonitoringReqInfo.TimeBeforeHour = "1"
+			timeBeforeHour = 1
+		} else {
+			return irs.MetricData{}, errors.New("invalid value of TimeBeforeHour")
+		}
+	}
+	if timeBeforeHour < 0 {
+		return irs.MetricData{}, errors.New("invalid value of TimeBeforeHour")
+	}
+
+	if timeBeforeHour*60 < intervalMinute {
+		return irs.MetricData{}, errors.New("IntervalMinute is too far in the past")
+	}
+
+	// log HisCall
+	hiscallInfo := GetCallLogScheme(monitoringHandler.Region, call.MONITORING, vmMonitoringReqInfo.VMIID.NameId, "GetVMMetricData()")
+	start := call.Start()
+
+	convertedIID, err := ConvertVMIID(vmMonitoringReqInfo.VMIID, monitoringHandler.CredentialInfo, monitoringHandler.Region)
+	if err != nil {
+		getErr := errors.New(fmt.Sprintf("Failed to get metric data. err = %s", err))
+		cblogger.Error(getErr.Error())
+		LoggingError(hiscallInfo, getErr)
+		return irs.MetricData{}, getErr
+	}
+
+	vm, err := GetRawVM(convertedIID, monitoringHandler.Region.Region, monitoringHandler.VMClient, monitoringHandler.Ctx)
+	if err != nil {
+		getErr := errors.New(fmt.Sprintf("Failed to get metric data. err = %s", err))
+		cblogger.Error(getErr.Error())
+		LoggingError(hiscallInfo, getErr)
+		return irs.MetricData{}, getErr
+	}
+
+	vmMonitoringInfo, err := monitoringHandler.getMetricData(vmMonitoringReqInfo.MetricType, interval, timeBeforeHour, *vm.ID)
+	if err != nil {
+		getErr := errors.New(fmt.Sprintf("Failed to get metric data. err = %s", err))
+		cblogger.Error(getErr.Error())
+		LoggingError(hiscallInfo, getErr)
+		return irs.MetricData{}, getErr
+	}
+
+	LoggingInfo(hiscallInfo, start)
+
+	return vmMonitoringInfo, nil
+}
+
+func (monitoringHandler *AzureMonitoringHandler) GetClusterNodeMetricData(clusterNodeMonitoringReqInfo irs.ClusterNodeMonitoringReqInfo) (irs.MetricData, error) {
+	intervalMinute, err := strconv.Atoi(clusterNodeMonitoringReqInfo.IntervalMinute)
+	if err != nil {
+		if clusterNodeMonitoringReqInfo.IntervalMinute == "" {
+			clusterNodeMonitoringReqInfo.IntervalMinute = "1"
+			intervalMinute = 1
+		} else {
+			return irs.MetricData{}, errors.New("invalid value of IntervalMinute")
+		}
+	}
+
+	interval, err := toAzureIntervalMinute(clusterNodeMonitoringReqInfo.IntervalMinute)
+	if err != nil {
+		return irs.MetricData{}, err
+	}
+
+	timeBeforeHour, err := strconv.Atoi(clusterNodeMonitoringReqInfo.TimeBeforeHour)
+	if err != nil {
+		if clusterNodeMonitoringReqInfo.TimeBeforeHour == "" {
+			clusterNodeMonitoringReqInfo.TimeBeforeHour = "1"
+			timeBeforeHour = 1
+		} else {
+			return irs.MetricData{}, errors.New("invalid value of TimeBeforeHour")
+		}
+	}
+	if timeBeforeHour < 0 {
+		return irs.MetricData{}, errors.New("invalid value of TimeBeforeHour")
+	}
+
+	if timeBeforeHour*60 < intervalMinute {
+		return irs.MetricData{}, errors.New("IntervalMinute is too far in the past")
+	}
+
+	// log HisCall
+	hiscallInfo := GetCallLogScheme(monitoringHandler.Region, call.MONITORING, clusterNodeMonitoringReqInfo.ClusterIID.NameId, "GetClusterNodeMetricData()")
+	start := call.Start()
+
+	clusterHandler := AzureClusterHandler{
+		Region:                          monitoringHandler.Region,
+		CredentialInfo:                  monitoringHandler.CredentialInfo,
+		Ctx:                             monitoringHandler.Ctx,
+		ManagedClustersClient:           monitoringHandler.ManagedClustersClient,
+		SecurityGroupsClient:            monitoringHandler.SecurityGroupsClient,
+		VirtualNetworksClient:           monitoringHandler.VirtualNetworksClient,
+		AgentPoolsClient:                monitoringHandler.AgentPoolsClient,
+		VirtualMachineScaleSetsClient:   monitoringHandler.VirtualMachineScaleSetsClient,
+		VirtualMachineScaleSetVMsClient: monitoringHandler.VirtualMachineScaleSetVMsClient,
+	}
+
+	cluster, err := clusterHandler.GetCluster(clusterNodeMonitoringReqInfo.ClusterIID)
+	if err != nil {
+		getErr := errors.New(fmt.Sprintf("Failed to get cluster info. err = %s", err))
+		cblogger.Error(getErr.Error())
+		LoggingError(hiscallInfo, getErr)
+		return irs.MetricData{}, getErr
+	}
+
+	var nodeFound bool
+	var resourceID string
+
+	for _, nodeGroup := range cluster.NodeGroupList {
+		if nodeGroup.IId.NameId == clusterNodeMonitoringReqInfo.NodeGroupID.NameId ||
+			nodeGroup.IId.SystemId == clusterNodeMonitoringReqInfo.NodeGroupID.SystemId {
+			for _, node := range nodeGroup.Nodes {
+				if node.NameId == clusterNodeMonitoringReqInfo.NodeIID.NameId ||
+					node.SystemId == clusterNodeMonitoringReqInfo.NodeIID.SystemId {
+					nodeFound = true
+					resourceID = node.SystemId
+					break
+				}
+			}
+		}
+	}
+
+	if !nodeFound {
+		getErr := errors.New(fmt.Sprintf("Failed to get metric data. err = Node not found from the cluster"))
+		cblogger.Error(getErr.Error())
+		LoggingError(hiscallInfo, getErr)
+		return irs.MetricData{}, getErr
+	}
+
+	vmMonitoringInfo, err := monitoringHandler.getMetricData(clusterNodeMonitoringReqInfo.MetricType, interval, timeBeforeHour, resourceID)
+	if err != nil {
+		getErr := errors.New(fmt.Sprintf("Failed to get metric data. err = %s", err))
+		cblogger.Error(getErr.Error())
+		LoggingError(hiscallInfo, getErr)
+		return irs.MetricData{}, getErr
+	}
+
+	LoggingInfo(hiscallInfo, start)
+
+	return vmMonitoringInfo, nil
+}
diff --git a/cloud-control-manager/cloud-driver/interfaces/resources/MonitoringHandler.go b/cloud-control-manager/cloud-driver/interfaces/resources/MonitoringHandler.go
index 6cd8471f..54f88e7f 100644
--- a/cloud-control-manager/cloud-driver/interfaces/resources/MonitoringHandler.go
+++ b/cloud-control-manager/cloud-driver/interfaces/resources/MonitoringHandler.go
@@ -15,13 +15,22 @@ import (
 	"time"
 )
 
-type MonitoringReqInfo struct {
+type VMMonitoringReqInfo struct {
 	VMIID          IID
 	MetricType     MetricType
 	IntervalMinute string
 	TimeBeforeHour string
 }
 
+type ClusterNodeMonitoringReqInfo struct {
+	ClusterIID     IID
+	NodeGroupID    IID
+	NodeIID        IID
+	MetricType     MetricType
+	IntervalMinute string
+	TimeBeforeHour string
+}
+
 type TimestampValue struct {
 	Timestamp time.Time
 	Value     string
@@ -71,5 +80,6 @@ func StringMetricType(input string) MetricType {
 }
 
 type MonitoringHandler interface {
-	GetVMMetricData(monitoringReqInfo MonitoringReqInfo) (MetricData, error)
+	GetVMMetricData(vmMonitoringReqInfo VMMonitoringReqInfo) (MetricData, error)
+	GetClusterNodeMetricData(clusterMonitoringReqInfo ClusterNodeMonitoringReqInfo) (MetricData, error)
 }
